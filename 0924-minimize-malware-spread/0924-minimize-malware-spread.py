class DSU:
    def __init__(self, n):
        self.parent = [x for x in range(n)]
        self.size = [1]*n
    
    def find(self, x):
        if self.parent[x] == x: return x
        self.parent[x] = self.find(self.parent[x])
        return self.parent[x]
    
    def union(self, a, b):
        x, y = self.find(a), self.find(b)
        if x == y: return
        self.parent[y] = x
        self.size[x] += self.size[y]
        self.size[y] = self.size[x]

class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        n = len(graph)
        dsu = DSU(n)
        
        for i in range(n):
            for j in range(n):
                if i != j and graph[i][j] == 1:
                    dsu.union(i,j)
        
        parentCount = [0]*n
        for i in initial:
            parentCount[dsu.find(i)] += 1
        
        maxi = -1
        ans = -1
        for i in initial:
            if parentCount[dsu.find(i)] == 1 and dsu.size[dsu.find(i)] >= maxi:
                if dsu.size[dsu.find(i)] == maxi: ans = min(ans, i)
                else: ans = i
                maxi = dsu.size[dsu.find(i)]
        
        return ans if ans != -1 else min(initial)
                
            